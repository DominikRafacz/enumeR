?as
as.list.factor(factor(c("51", "vd", "dwf")))
factor
as.enum_type.character <- function(vector) {
print(deparse(substitute(vector)))
}
ckj <- c("sdfk", "df")
as.enum_type.character(ckj)
library(devtools)
import(enumeR)
library(enumeR)
devtools::install()
library(enumeR)
enumeR::enum_type()
as.factor
as.character
as.data.frame
?as.data.frame
?stopifnot
as.data.frame.vector
?as.data.frame.vector
devtools::install()
library(enumeR)
aix <- c("Ktret", "Kwont")
as.enum_type(aix)
devtools::install()
library(enumeR)
rm(as.enum_type.character)
as.enum_type(aix)
enumer::as.enum_type(aix)
enumeR::as.enum_type(aix)
devtools::document()
devtools::document()
devtools::install()
library(enumeR)
as.enum_type(aix)
devtools::document()
devtools::install()
as.enum_type(aix)
as.data.frame
as.data.frame.vector
as.data.frame.character
as.data.frame.default
devtools::document()
devtools::install()
as.enum_type(aix)
devtools::document()
devtools::install()
as.enum_type(aix)
enumeR::as.enum_type.character
enumeR::as.enum_type.characte
devtools::document()
devtools::install()
as.enum_type(aix)
as.enum_type.character
as.enum_type.character()
as.enum_type()
warning("sfk")
message("sfk")
devtools::document()
devtools::install()
as.enum_type(aix)
library(enumeR)
as.enum_type(aix)
enum_type("aix", c("dfk", "dsf"))
print.enum_type("aix", c("dfk", "dsf"))
devtools::document()
devtools::install()
library(enumeR)
devtools::document()
as.enum_type(aix)
devtools::install()
devtools::document()
as.enum_type(aix)
a <- list(name = "fd", d = c(1, 4,13, 4), t = c("fkdk", "Ff"))
a[[-name]]
a[[-"name"]]
a[!grepl("name",unlist(a))]
unlist(a)
names(a)
which(names(a) != "name")
a$df[1]
a$df[[1]][5]
library(enumeR)
?as.enum_type
?enum_type
library(mlr)
getParamSet("classif.OneR")
getParamSet("classif.xgboost")
install.packages("roxygen2")
devtools::install()
devtools::document()
library(enumeR)
devtools::install()
devtools::document()
?enum_type
?as.enum_type
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
?as.enum_type
devtools::build()
devtools::install()
devtools::document()
devtools::document()
devtools::reload()
aix <- c("dfgk", "fdfk", "dfgk")
as.enum_type(aix)
library(enumeR)
as.enum_type(aix)
devtools::install()
devtools::document()
as.enum_type(aix)
?enum_type
?as.enum_type
devtools::document()
roxygen2::roxygenize()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(dplyr)
library(tidyverse)
head(enum_type)
aix
as.enum_type(aix)
head(as.enum_type(aix))
aix2 <- as.enum_type(aix)
get_enum_values(aix)
aix$dfgk
aix2$dfgk
aix2$values$dfgk
aix2$values
aix2$values[[1]]
enum_index(aix2$values[[1]])
enum_index(c(aix2$values[[1]], aix2$values[[2]]))
enum_index(aix2$values[[2]])
devtools::install()
devtools::build()
devtools::document()
devtools::install()
library(enumeR)
devtools::build()
devtools::document()
aix2 %>% get_enum_values()
get_enum_values(aix2)
aix2 <- as.enum_type(aix)
aix2
devtools::build()
devtools::document()
devtools::install()
library(enumeR)
aix2 <- as.enum_type(aix)
library(enumeR)
aix2 <- as.enum_type(aix)
library(enumeR)
install.packages("Rtools")
library(enumeR)
library(enumeR)
aix2 <- as.enum_type(aix)
aix <- c("BIG", "STICKY", "LAID_BACK")
devtools::load_all(".")
aix2 <- as.enum_type(aix)
get_enum_values(aix2)
library(enumeR)
get_enum_values(aix2)
devtools::load_all(".")
get_enum_values(aix2)
aix2
str(aix2)
library(enumeR)
devtools::load_all(".")
get_enum_values(aix2)
is.enum_type(aix2)
length(unique(names(values)))
length(unique(names(aix2$values)))
names(aix2$values)
aix2$values
enum_type <- function(type_name, values) {
print(sys.calls())
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
enum_type("aix", c("dsk"))
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(sys.calls(-1))
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(sys.call(-1))
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(sys.call(1))
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(sys.call(0))
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(sys.calls()[[sys.nframe()-1]])
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(deparse(sys.calls()[[sys.nframe()-1]]))
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(sys.calls())
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
"<-"(y, enum_type("aix", c("dsk")))
("<-"(y, enum_type("aix", c("dsk"))))
"("(enum_type("aix", c("dsk")))
"("("s")
"("(y <- "s")
y
y <- enum_type("aix", c("dsk"))
enum_type <- function(type_name, values) {
print(traceback())
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
enum_type <- function(type_name, values) {
print(traceback())
stopifnot(is.character(type_name))
stopifnot(length(type_name) == 1)
stopifnot(is.character(values))
n <- length(values)
stopifnot(length(unique(values)) == n)
type <- list(values = lapply(1:n, function(i) enum_value(values[i], i)),
type_name = type_name)
class(type) <- "enum_type"
type
}
y <- enum_type("aix", c("dsk"))
rm(enum_type)
library(mlr)
getParamSet("classif.rferns")
getParamSet("classif.rFerns")
getParamSet("classif.randomForestSRC")
getParamSet("classif.randomForest")
getParamSet("classif.naiveBayes")
getParamSet("classif.multinom")
getParamSet("classif.ksvm")
#warning! calling enum_type without assignment to variable returns "anonymus" enum - what should we do?
planet <- enum_type(c("MERCURE", #field value
"VENUS",
"EARTH",
"MARS",
"JUPITER",
"SATURN",
"URANUS",
"NEPTUNE"),
#this fields are private, to get access from outside you need to write a function
mass = c(
12123,
1243124,
412414321,
14124124,
21431241432,
1324123,
12412341,
4124312
),
radius = c(
2222,
222,
22222,
22221,
1111,
11111,
1111,
11111
))
a
a <- list(f = 451, g = c("fd", "ha"))
a["f"]
a[["f"]]
a[2]
a[[2]]
a[[1:2]]
a[1:2]
%.%
as.integer("gd", "gt")
as.integer("gd")
as.integer(1.5, 2, 6)
as.integer(c(1.5, 2, 6))
aix2
aix2[[2]]
aix2[[1]]
getParamSet("classif.gbm")
getParamSet("classif.evtree")
install.packages("evtree")
getParamSet("classif.evtree")
getParamSet("classif.ctree")
getParamSet("classif.cforest")
c(a, y, aix)
a(a, aix)
c(a, aix)
str(c(a, aix))
devtools::build()
devtools::document()
library(enumeR)
devtools::load_all(".")
?as.enum_type
?enum_type
help(enum_type)
help("enum_type")
as.enum_type(aix <- c("START", "MIDWAY", "MEDIAN"))
as.enum_type(c("START", "MIDWAY", "MEDIAN"))
library(enumeR)
as.enum_type(aix)
devtools::load_all(".")
as.enum_type(aix)
library(enumeR)
devtools::load_all(".")
as.enum_type(aix)
library(enumeR)
devtools::load_all(".")
library(enumeR)
as.enum_type(aix)
library(enumeR)
devtools::load_all(".")
as.enum_type(aix)
library(tidyverse)
library(enumeR)
library(enumeR)
devtools::load_all(".")
?is.enum_type
